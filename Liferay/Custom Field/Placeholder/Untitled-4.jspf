
        AUI.add(
        'liferay-portlet-dynamic-data-mapping-custom-fields',
        function(A) {
            var stringParse = A.DataType.String.parse,
                getCN = A.getClassName,
                L = A.Lang,
                AEscape = A.Escape,
                CSS_CLEARFIX = getCN('clearfix'),
                CSS_FORM_CONTROL = getCN('form', 'control'),
                CSS_FIELD_INPUT = getCN('field', 'input'),
                CSS_FIELD_INPUT_TEXT = getCN('field', 'input', 'text'),
                CSS_FORM_BUILDER_FIELD = getCN('form-builder-field'),
                CSS_FORM_BUILDER_FIELD_NODE = getCN('form-builder-field', 'node'),
                CSS_FB_DROP_ZONE = getCN('form', 'builder', 'drop', 'zone'),
                CSS_ICON = getCN('glyphicon'),
                CSS_ICON_ASTERISK = getCN('glyphicon', 'asterisk'),
                CSS_ICON_QUESTION_SIGN = getCN('glyphicon', 'question', 'sign'),
                TPL_INPUT = '<input id="{id}" class="ddm-form-builder-text-field-placeholder ' + [CSS_FORM_BUILDER_FIELD_NODE, CSS_FIELD_INPUT,
                         CSS_FIELD_INPUT_TEXT, CSS_FORM_CONTROL].join(' ') +
                         '" name="{name}" type="text" value="{value}" placeholder="{placeholder}"/>';

            var WIDTH_VALUES_MAP = {
                small: 'col-xs-4',
                medium: 'col-xs-8',
                large: 'col-xs-12'
            };

            var LiferayFormBuilderTextField = function() {};
            LiferayFormBuilderTextField.ATTRS = {
                template: {
                    valueFn: function() {
                        return TPL_INPUT;
                    }
                },

                placeholder: {
                    setter: stringParse,
                    value: ''
                }
            };

            A.Base.mix(A.FormBuilderTextField, [LiferayFormBuilderTextField]);

            var FormBuilderTextFieldProto = A.FormBuilderTextField.prototype;
            var originalFormBuilderTextFieldGetPropertyModel = FormBuilderTextFieldProto.getPropertyModel;

            FormBuilderTextFieldProto.getPropertyModel = function() {
                var instance = this;
                var model = originalFormBuilderTextFieldGetPropertyModel.call(instance);
                var type = instance.get('type');

                return model.concat(
                    {
                        attributeName: 'placeholder',
                        editor: new A.TextCellEditor(),
                        formatter: function(val) {
                            return val.data.value;
                        },
                        name: '<liferay-ui:message key="Placeholder" />'
                    }
                );
            };

            FormBuilderTextFieldProto.getHTML = function() {
                var instance = this;

                return L.sub(
                    instance.get('template'), {
                        id: AEscape.html(instance.get('id')),
                        label: AEscape.html(instance.get('label')),
                        name: AEscape.html(instance.get('name')),
                        value: AEscape.html(instance.get('predefinedValue')),
                        width: AEscape.html(instance.get('width')),
                        placeholder: AEscape.html(instance.get('placeholder')),
                    }
                );
            };

            FormBuilderTextFieldProto._uiSetPlaceholder = function(val) {

                var instance = this;
                var placeholder = instance.get('placeholder');
            };

            FormBuilderTextFieldProto._uiSetWidth = function(val) {
                var instance = this,
                templateNode = instance.get('templateNode');

                templateNode.removeClass(WIDTH_VALUES_MAP[instance.prevWidth]);
                templateNode.addClass(WIDTH_VALUES_MAP[val]);

                instance.prevWidth = val;
            };
        },
        '',
        {
            requires: ['liferay-portlet-dynamic-data-mapping']
        }
    );